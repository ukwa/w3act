# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Catch trailing "/", we'll redirect them - h/t http://stackoverflow.com/a/13196239
# ANJ: This plays havoc with Wayback playback, so disabling for now.
#GET     /*path/                             controllers.ApplicationController.untrail(path: String)

# The home page
GET     /                                   controllers.ApplicationController.home()

# About
GET     /about                              controllers.ApplicationController.index()
GET     /status                             controllers.StatusController.status()
GET     /status/fixFast                     controllers.StatusController.addFastDefaultSubjects()

# Authentication
GET     /login                              controllers.ApplicationController.login()
POST    /login                              controllers.ApplicationController.authenticate()
GET     /logout                             controllers.ApplicationController.logout()

# Javascript routing
GET     /assets/javascripts/routes          controllers.ApplicationController.javascriptRoutes()

# Map static resources from the /public folder to the /public path
GET     /assets/*file                       controllers.Assets.at(path="/public", file)

# Licence form
GET     /ukwa/licenses                      controllers.LicenseController.index()
POST    /ukwa/licenses/submit               controllers.LicenseController.submit()
GET     /ukwa/licenses/result               controllers.LicenseController.result()
GET     /ukwa/license/view/:id              controllers.LicenseController.view(id:Long)
GET     /ukwa/license/messagesJs            controllers.LicenseController.messagesJs()
GET     /ukwa/licenseform/:token            controllers.LicenseController.form(token)
GET     /ukwa/licenseformview/:token        controllers.LicenseController.formview(token)

GET     /licenses                           controllers.LicenseController.indexFilter()
POST    /licenses/filter                    controllers.LicenseController.filter()
GET     /licenses/filterbyjson/:name        controllers.LicenseController.filterByJson(name)

GET     /licences/list                      controllers.LicencesController.list()
GET     /licences/preview/:id               controllers.LicencesController.preview(id: Long)
GET     /licences/edit/:id                  controllers.LicencesController.edit(id: Long)
GET     /licences/new                       controllers.LicencesController.newForm()
POST    /licences/save                      controllers.LicencesController.save()

# Tabs
GET     /collections                        controllers.CollectionController.index()
GET     /collections/list                   controllers.CollectionController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /collections/search                 controllers.CollectionController.search()
GET     /collections/filterbyjson/:name     controllers.CollectionController.filterByJson(name)
GET     /collections/new                    controllers.CollectionController.newForm()
GET     /collections/:id                    controllers.CollectionController.view(id:Long)
#GET     /collections/:id/json                  controllers.CollectionController.viewAsJson(id:Long)
GET     /collections/:url                   controllers.CollectionController.viewAct(url)
GET     /collections/:id/edit               controllers.CollectionController.edit(id:Long)
GET     /collections/:id/sites              controllers.CollectionController.sites(id:Long)
POST    /collections                        controllers.CollectionController.save()
POST    /collections/:id                    controllers.CollectionController.update(id:Long)
#PUT     /collections/:id                   controllers.CollectionController.update(id:Long)

GET     /subjects                           controllers.SubjectController.index()
GET     /subjects/list                      controllers.SubjectController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /subjects/search                    controllers.SubjectController.search()
GET     /subjects/filterbyjson/:name        controllers.SubjectController.filterByJson(name)
GET     /subjects/new                       controllers.SubjectController.newForm()
GET     /subjects/:id                       controllers.SubjectController.view(id:Long)
GET     /subjects/:id/edit                  controllers.SubjectController.edit(id:Long)
GET     /subjects/:id/targets               controllers.SubjectController.sites(id:Long)
POST    /subjects                           controllers.SubjectController.save()
POST    /subjects/:id                       controllers.SubjectController.update(id:Long)

GET     /taxonomy                           controllers.TaxonomyController.index()
GET     /taxonomy/list                      controllers.TaxonomyController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /taxonomy/search                    controllers.TaxonomyController.search()
GET     /taxonomy/filterbyjson/:name        controllers.TaxonomyController.filterByJson(name)
GET     /taxonomy/new/:name                 controllers.TaxonomyController.create(name)
GET     /taxonomy/:id                       controllers.TaxonomyController.view(id:Long)
GET     /taxonomy/:id/edit                  controllers.TaxonomyController.edit(id:Long)
POST    /taxonomy                           controllers.TaxonomyController.save()

GET     /organisations                      controllers.OrganisationController.index()
GET     /organisations/list                 controllers.OrganisationController.list(p:Int ?= 0, s ?= "name", o ?= "asc", q ?= "")
GET     /organisations/search               controllers.OrganisationController.search()
GET     /organisations/filterbyjson/:title  controllers.OrganisationController.filterByJson(title)
GET     /organisations/new                  controllers.OrganisationController.newForm()
GET     /organisations/:id                  controllers.OrganisationController.view(id:Long)
GET     /organisations/act/:id              controllers.OrganisationController.viewAct(id)
GET     /organisations/wct/:id              controllers.OrganisationController.viewWct(id)

GET     /organisations/:id/edit             controllers.OrganisationController.edit(id:Long)
GET     /organisations/:id/sites            controllers.OrganisationController.sites(id:Long)
GET     /organisations/:id/admin            controllers.OrganisationController.admin(id:Long)
POST    /organisations/admin                controllers.OrganisationController.saveAdmin()
POST    /organisations                      controllers.OrganisationController.save()
POST    /organisations/:id                  controllers.OrganisationController.update(id:Long)

GET     /curators                           controllers.UserController.index()
GET     /curators/list                      controllers.UserController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /curators/search                    controllers.UserController.search()
GET     /curators/filterbyjson/:name        controllers.UserController.filterByJson(name)
GET     /curators/new                       controllers.UserController.newForm(name ?= "")
GET     /curators/:id                       controllers.UserController.view(id:Long)
GET     /curators/act/:id                   controllers.UserController.viewAct(id)
GET     /curators/wct/:id                   controllers.UserController.viewWct(id)
GET     /curators/:id/edit                  controllers.UserController.edit(id:Long)
GET     /curators/:id/sites                 controllers.UserController.sites(id:Long)
POST    /curators                           controllers.UserController.save()
POST    /curators/:id                       controllers.UserController.update(id:Long)

GET     /roles                              controllers.RoleController.index()
GET     /roles/list                         controllers.RoleController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /roles/search                       controllers.RoleController.search()
GET     /roles/filterbyjson/:name           controllers.RoleController.filterByJson(name)
GET     /roles/new                          controllers.RoleController.newForm()
GET     /roles/:id                          controllers.RoleController.view(id:Long)
GET     /roles/:id/edit                     controllers.RoleController.edit(id:Long)
GET     /roles/:id/admin                    controllers.RoleController.admin(id:Long)
POST    /roles/admin                        controllers.RoleController.saveAdmin()
POST    /roles                              controllers.RoleController.save()
POST    /roles/:id                          controllers.RoleController.update(id:Long)

GET     /permissions                        controllers.PermissionController.index()
GET     /permissions/list                   controllers.PermissionController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /permissions/search                 controllers.PermissionController.search()
GET     /permissions/filterbyjson/:name     controllers.PermissionController.filterByJson(name)
GET     /permissions/new                    controllers.PermissionController.newForm()
GET     /permissions/:id                    controllers.PermissionController.view(id:Long)
GET     /permissions/:id/edit               controllers.PermissionController.edit(id:Long)
POST    /permissions                        controllers.PermissionController.save()
POST    /permissions/:id                    controllers.PermissionController.update(id:Long)

GET     /tags                               controllers.TagController.index()
GET     /tags/list                          controllers.TagController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /tags/search                        controllers.TagController.search()
GET     /tags/filterbyjson/:name            controllers.TagController.filterByJson(name)
GET     /tags/new                           controllers.TagController.newForm()
GET     /tags/:id                           controllers.TagController.view(id:Long)
GET     /tags/:id/edit                      controllers.TagController.edit(id:Long)
POST    /tags                               controllers.TagController.save()
POST    /tags/:id                           controllers.TagController.update(id:Long)

GET     /overview/watchedtargets            controllers.WatchedTargets.overview(p:Int ?= 0, s ?= "target.title", o ?= "asc")
GET     /overview/documents                 controllers.Documents.overview(p:Int ?= 0, s ?= "waybackTimestamp", o ?= "desc")

GET     /fastsubjects/list                  controllers.FastSubjects.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /fastsubjects/new                   controllers.FastSubjects.newForm()
GET     /fastsubjects/edit/:id              controllers.FastSubjects.edit(id: Long)
GET     /fastsubjects/delete/:id            controllers.FastSubjects.delete(id: Long)
POST    /fastsubjects                       controllers.FastSubjects.save()

GET     /documents/filterbyjson/:title      controllers.Documents.filterByJson(title)
GET     /documents/unsaved                  controllers.Documents.continueEdit()
GET     /documents/list                     controllers.Documents.list(filter: models.DocumentFilter ?= new models.DocumentFilter(), p:Int ?= 0, s ?= "waybackTimestamp", o ?= "desc", f ?= "")
GET     /documents/ignoreall                controllers.Documents.ignoreAll(filter: models.DocumentFilter, f, filters: Boolean)
GET     /documents/export                   controllers.Documents.export(filter: models.DocumentFilter, s, o, f)
GET     /documents/compare/$id1<[0-9]+>..$id2<[0-9]+>   controllers.Documents.compare(id1: Long, id2: Long)
GET     /documents/html/*file               controllers.Documents.html(file)
GET     /documents/:document                controllers.Documents.view(document: Long)
GET     /documents/:document/edit           controllers.Documents.edit(document: Long)
POST    /documents/:document/submit         controllers.Documents.submit(document: Long)
GET     /documents/:document/ignore         controllers.Documents.ignore(document: Long, filter: models.DocumentFilter, p:Int, s, o, f, filters: Boolean)
GET     /documents/:document/sip            controllers.DocumentSIPController.sip(document: Long)
POST    /documents/:id                      controllers.Documents.save(id: Long)
POST    /documents                          controllers.Documents.importJson()

GET     /pii/vdc                            controllers.Pii.pii(arks: Integer)
POST     /pii/vdc                            controllers.Pii.pii(arks: Integer)

GET     /journaltitles/:journaltitle        controllers.JournalTitles.edit(journaltitle: Long)
POST    /journaltitles                      controllers.JournalTitles.save(toDocument: Boolean ?= false)

GET     /watchedtargets/filterbyjson/:url   controllers.WatchedTargets.filterByJson(url)
GET     /watchedtargets/crawlAll            controllers.WatchedTargets.crawlAll()
GET     /watchedtargets/convert             controllers.WatchedTargets.convert()
GET     /watchedtargets/crawl               controllers.WatchedTargets.crawl(watchedtarget: Long, wayback: Boolean ?= false)
GET     /watchedtargets/list                controllers.WatchedTargets.list(user ?= "", children: Boolean ?= false, p:Int ?= 0, s ?= "target.title", o ?= "asc", f ?= "")
GET     /watchedtargets/:id                 controllers.WatchedTargets.view(id: Long)
GET     /watchedtargets/:id/journaltitles   controllers.JournalTitles.addJournalTitle(id: Long, toDocument: Boolean ?= false)
GET     /watchedtargets/:id/nodocuments     controllers.WatchedTargets.noDocuments(id: Long)

GET     /secret/:id                         controllers.LoginCredentialsController.getSecret(id: Int)

GET     /services/edit/:id                  controllers.Services.edit(id: Long)
GET     /services/save/:id                  controllers.Services.save(id: Long)

GET     /alerts/list                        controllers.Alerts.list(p:Int ?= 0, s ?= "createdAt", o ?= "desc")
POST    /alerts/action                      controllers.Alerts.action()

GET     /flags                              controllers.FlagController.index()
GET     /flags/list                         controllers.FlagController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /flags/search                       controllers.FlagController.search()
GET     /flags/filterbyjson/:name           controllers.FlagController.filterByJson(name)
GET     /flags/new                          controllers.FlagController.newForm()
GET     /flags/:id                          controllers.FlagController.view(id:Long)
GET     /flags/:id/edit                     controllers.FlagController.edit(id:Long)
POST    /flags                              controllers.FlagController.save()
POST    /flags/:id                          controllers.FlagController.update(id:Long)

GET     /crawlpermissions                       controllers.CrawlPermissionController.index()
GET     /crawlpermissions/list                  controllers.CrawlPermissionController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", status ?= "QUEUED", organisation ?= "ANY", sel ?= "selectall")
GET     /crawlpermissions/search                controllers.CrawlPermissionController.search()
GET     /crawlpermissions/filterbyjson/:name    controllers.CrawlPermissionController.filterByJson(name)
GET     /crawlpermissions/new                   controllers.CrawlPermissionController.newForm(targetId:Long ?= -1)
POST    /crawlpermissions/send                  controllers.CrawlPermissionController.send()
POST    /crawlpermissions/sendPreview           controllers.CrawlPermissionController.sendPreview()
GET     /crawlpermissions/:id                   controllers.CrawlPermissionController.view(id:Long)
GET     /crawlpermissions/:id/edit              controllers.CrawlPermissionController.edit(id:Long)
POST    /crawlpermissions/save                  controllers.CrawlPermissionController.save()
POST    /crawlpermissions/update/:id            controllers.CrawlPermissionController.update(id:Long)

GET     /reports                                controllers.ReportController.index()
GET     /reports/crawlstatus                    controllers.ReportController.processFilterReports(p:Int ?= 0, curator:Long ?= -1L, organisation:Long ?= -1L, crawlPermissionsStatus ?= "", request ?= "", requestedFromDate ?= "", requestedToDate ?= "", grantedFromDate ?= "", grantedToDate ?= "")
GET     /reports/search                         controllers.ReportController.search()
GET     /reports/summary                        controllers.ReportController.summary()
GET     /reports/openLicences                   controllers.ReportController.openLicences()
GET     /reports/recordCreation                 controllers.ReportController.recordCreation()
GET     /reports/consistencyChecks              controllers.ReportController.consistencyChecks()
GET     /reports/consistencyChecks/rti          controllers.ReportController.removeTwitterInconsistencies()
GET     /reports/consistencyChecks/rgi          controllers.ReportController.removeGrantedInconsistencies()
GET     /reports/consistencyChecks/rqi          controllers.ReportController.removeQueuedInconsistencies()
GET     /reports/consistencyChecks/rln          controllers.ReportController.resetThisLicenseToNull(id:Long ?= -1)
GET     /reports/consistencyChecks/rbs          controllers.ReportController.resetBadScopes()
GET     /reports/consistencyChecks/eds          controllers.ReportController.resetEmptyStartDates()
GET     /reports/consistencyChecks/rur          controllers.ReportController.removeUnwantedRoles()
GET     /reports/qa                             controllers.ReportController.qa()
GET     /reportscreation                        controllers.ReportController.indexCreation() 
GET     /reportscreation/search                 controllers.ReportController.searchCreation()
GET     /reportscreation/targets                controllers.ReportController.targets(p:Int ?= 0, s ?= "name", o ?= "asc", curator:Long ?= 0, organisation:Long ?= 0, startDate ?= "", endDate ?= "", npld ?= "", crawlFrequency ?= "", tld ?= "")
GET     /reportsqa                              controllers.ReportQaController.index() 
GET     /reportsqa/search                       controllers.ReportQaController.search()
GET     /reportsqa/switchReportQaTab/:name      controllers.ReportQaController.switchReportQaTab(name) 
GET     /reportsqa/targets                      controllers.ReportQaController.targets(p:Int ?= 0, s ?= "name", o ?= "asc", status ?= "", curatorId:Long ?= 0, organisationId:Long ?= 0, startDate ?= "", endDate ?= "", collectionId:Long ?= 0)

GET     /mailtemplates                          controllers.MailTemplateController.index()
GET     /mailtemplates/search                   controllers.MailTemplateController.search()
GET     /mailtemplates/filterbyjson/:name       controllers.MailTemplateController.filterByJson(name)
GET     /mailtemplates/new                      controllers.MailTemplateController.newForm()
GET     /mailtemplates/:id                      controllers.MailTemplateController.view(id:Long)
GET     /mailtemplates/:id/edit                 controllers.MailTemplateController.edit(id:Long)
POST    /mailtemplates                          controllers.MailTemplateController.save()
POST    /mailtemplates/:id                      controllers.MailTemplateController.update(id:Long)

GET     /targets                                controllers.TargetController.index()
GET     /targets/search                         controllers.TargetController.search()
GET     /targets/search-targets                 controllers.TargetController.searchTargets()
GET     /targets/search-targets-by-collection   controllers.TargetController.searchTargetsByCollection()
GET     /targets/search-targets-by-organisation controllers.TargetController.searchTargetsByOrganisation()
GET     /targets/search-targets-by-user         controllers.TargetController.searchTargetsByUser()
GET     /targets/search-targets-by-subject      controllers.TargetController.searchTargetsBySubject()

GET     /targets/filterbyjson/:url          controllers.TargetController.filterByJson(url)
GET     /targets/lookup                     controllers.TargetController.lookup(p:Int ?= 0, s ?= "seeds", o ?= "asc", f ?= "")
GET     /targets/list                       controllers.TargetController.list(p:Int ?= 0, s ?= "title", o ?= "asc", f ?= "", curatorId:Long ?= 0, organisationId:Long ?= 0, subjects ?= "", crawlFrequency ?= "", depth ?= "", collections ?= "", licenseId:Long ?= 0, pageSize:Int ?= 10, flagId:Long ?= 0)
GET     /targets/new                        controllers.TargetController.newForm(title ?= "")

GET     /targets/collectiontargets          controllers.TargetController.collectionTargets(p:Int ?= 0, pageSize:Int ?= 50, s ?= "name", o ?= "asc", f ?= "", collectionId:Long ?= 0)
#GET        /targets/collectiontargets/:id/json controllers.TargetController.collectionTargetsAsJson(id:Long)
GET     /targets/organisationtargets        controllers.TargetController.organisationTargets(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", organisationId:Long)
GET     /targets/usertargets                controllers.TargetController.userTargets(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", userId:Long, subjectId:Long ?= 0, collectionId:Long ?= 0)
GET     /targets/subjecttargets             controllers.TargetController.subjectTargets(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", subjectId:Long ?= 0)
GET     /targets/export/ld/:frequency       controllers.TargetController.exportLdFrequencyJson(frequency)
GET     /targets/export/by/:frequency       controllers.TargetController.exportByFrequencyJson(frequency)

GET     /targets/upload                             controllers.TargetController.upload()
POST    /targets/upload/submit                      controllers.TargetController.uploadExcel()
GET     /targets/:id                                controllers.TargetController.view(id:Long)
#GET     /targets/:id/json                              controllers.TargetController.viewAsJson(id:Long)
GET     /targets/act/:id                            controllers.TargetController.viewAct(id)
GET     /targets/wct/:id                            controllers.TargetController.viewWct(id)
GET     /targets/:revision/revision                 controllers.TargetController.viewrevision(revision:Long)
GET     /targets/:id/edit                           controllers.TargetController.edit(id:Long)
POST    /targets                                    controllers.TargetController.save()
POST    /targets/:id                                controllers.TargetController.update(id:Long)
DELETE  /targets/:id                                controllers.TargetController.delete(id:Long)
GET     /targets/:id/instances/import               controllers.InstanceController.importFromWayback(id:Long, view ?= "")
GET     /targets/:id/instances/new                  controllers.InstanceController.newWithTarget(id:Long, title ?= "")
GET     /targets/:targetId/instances                controllers.InstanceController.results(targetId:Long)
GET     /targets/:targetId/instances/:instanceId    controllers.InstanceController.viewInstance(targetId:Long, instanceId:Long)

GET     /target/:targetId/crawlpermissions  controllers.CrawlPermissionController.showCrawlPermissions(targetId:Long)
GET     /target/licencerequest/:targetId    controllers.CrawlPermissionController.licenceRequestForTarget(targetId:Long)
GET     /target/archive/:id                 controllers.TargetController.archive(id:Long)

GET     /targets/:id/logincredentials   controllers.LoginCredentialsController.edit(id: Long)
POST    /targets/:id/logincredentials   controllers.LoginCredentialsController.save(id: Long)

# AJAX
GET    /targets/allSubjectsIDsAsJson/:subjects             controllers.TargetController.allSubjectsIDsAsJson(subjects: String)
GET    /targets/allCollectionsIDsAsJson/:collections       controllers.TargetController.allCollectionsIDsAsJson(collections: String)
# GET    /targets/getSingleCollectionByIdAsJson/:collectionid controllers.TargetController.getSingleCollectionByIdAsJson(collectionid: String)
GET    /collections/allCollectionAreasAsJson/:collectionAreas             controllers.CollectionController.allCollectionAreasAsJson(collectionAreas: String)


GET     /instances                          controllers.InstanceController.index()
GET     /instances/search                   controllers.InstanceController.search()
GET     /instances/filterbyjson/:url        controllers.InstanceController.filterByJson(url)
GET     /instances/list                     controllers.InstanceController.list(p:Int ?= 0, s ?= "createdAt", o ?= "desc", f ?= "")
GET     /instances/new                      controllers.InstanceController.newForm(title ?= "")
GET     /instances/listbytarget             controllers.InstanceController.listByTarget(p:Int ?= 0, s ?= "createdAt", o ?= "desc", f ?= "", t:Long)
GET     /instances/showbytarget/:id         controllers.InstanceController.showByTarget(id:Long)

GET     /instances/:id                      controllers.InstanceController.view(id:Long)
GET     /instances/act/:id                  controllers.InstanceController.viewAct(id)
GET     /instances/wct/:id                  controllers.InstanceController.viewWct(id)
GET     /instances/:id/edit                 controllers.InstanceController.edit(id:Long)
GET     /instances/:revision/revision       controllers.InstanceController.viewrevision(revision:Long)
POST    /instances                          controllers.InstanceController.save()
POST    /instances/:id                      controllers.InstanceController.update(id:Long)

GET     /contact                                controllers.ContactController.index()
POST    /contact/send                           controllers.ContactController.send()

GET     /qa                                     controllers.QAController.index()
GET     /qa/list                                controllers.QAController.list(p:Int ?= 0, s ?= "title", o ?= "asc", f ?= "", collection ?= "", qaIssueId:Long ?= 0)
GET     /qa/search                              controllers.QAController.search()
GET     /qa/filterbyjson/:name                  controllers.QAController.filterByJson(name)

# Navigation
GET     /addcontent                             controllers.ApplicationController.addContent()
GET     /findcontent                            controllers.ApplicationController.findContent()

GET     /exportlookup                           controllers.ExportController.index()
GET     /exportlookup/csv                       controllers.ExportController.search()

# Domain objects

GET     /contactpersons                     controllers.ContactPersonController.index()
GET     /contactpersons/search              controllers.ContactPersonController.search()
GET     /contactpersons/filterbyjson/:name  controllers.ContactPersonController.filterByJson(name)
GET     /contactpersons/new                 controllers.ContactPersonController.newForm()
GET     /contactpersons/:id/edit            controllers.ContactPersonController.edit(id:Long)
GET     /contactpersons/:id                 controllers.ContactPersonController.view(id:Long)
POST    /contactpersons                     controllers.ContactPersonController.save()
POST    /contactpersons/:id                 controllers.ContactPersonController.update(id:Long)

GET     /refusals/filter                    controllers.PermissionRefusalController.indexFilter()
GET     /refusals                           controllers.PermissionRefusalController.index()
GET     /refusals/search                    controllers.PermissionRefusalController.search()
GET     /refusals/filterbyjson/:name        controllers.PermissionRefusalController.filterByJson(name)
GET     /refusals/new                       controllers.PermissionRefusalController.newForm()
GET     /refusals/:id                       controllers.PermissionRefusalController.view(id:Long)
GET     /refusals/:id/edit                  controllers.PermissionRefusalController.edit(id:Long)
POST    /refusals                           controllers.PermissionRefusalController.save()
POST    /refusals/:id                       controllers.PermissionRefusalController.update(id:Long)

GET     /communicationlogs                  controllers.CommunicationLogController.index()
GET     /communicationlogs/new              controllers.CommunicationLogController.newForm()
POST    /communicationlogs/search           controllers.CommunicationLogController.search()
GET     /communicationlogs/filterbyjson/:name  controllers.CommunicationLogController.filterByJson(name)
GET     /communicationlogs/:id              controllers.CommunicationLogController.view(id:Long)
GET     /communicationlogs/:id/edit         controllers.CommunicationLogController.edit(id:Long)
GET     /communicationlogs/new/:log         controllers.CommunicationLogController.create(log)
POST    /communicationlogs                  controllers.CommunicationLogController.save()
POST    /communicationlogs/:id              controllers.CommunicationLogController.update(id:Long)
GET     /communicationlogs/link/:permission controllers.CommunicationLogController.showLogs(permission)

# Nomination form
POST    /ukwa/nomination/submit             controllers.NominationController.submit()
GET     /ukwa/nomination/result             controllers.NominationController.result()
GET     /ukwa/nominationform                controllers.NominationController.formpage()
GET     /nominations                        controllers.NominationController.index()
GET     /nominations/list                   controllers.NominationController.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /nominations/search                 controllers.NominationController.search()
GET     /nominations/filterbyjson/:name     controllers.NominationController.filterByJson(name)
GET     /nominations/new                    controllers.NominationController.newForm()
GET     /nominations/:id                    controllers.NominationController.view(id:Long)
GET     /nominations/:id/edit               controllers.NominationController.edit(id:Long)
POST    /nominations/load/json              controllers.NominationController.load()
POST    /nominations                        controllers.NominationController.save()
POST    /nominations/:id                    controllers.NominationController.update(id:Long)


# JSON API
GET     /api/scope/:url                      controllers.TargetController.isInScope(url)
GET     /api/licence/:url                    controllers.CrawlPermissionController.crawlPermissionExist(url)
GET     /api/licencelevel/:url               controllers.CrawlPermissionController.crawlPermissionExistAtHigherLevel(url)
GET     /api/licenceprompthigherlevel/:url   controllers.CrawlPermissionController.checkForHigherLevelPrompt(url)
GET     /api/suggested_collections/:url      controllers.TargetController.getSuggestedCollections(url)
GET     /api/suggested_collections_filter/:url      controllers.TargetController.getSuggestedCollectionsFilter(url)
GET     /api/subjects                        controllers.SubjectController.getAllSubjects()
GET     /api/subjects_instance/:url          controllers.InstanceController.getSubjectTree(url)
GET     /api/suggested_collections_instance/:url      controllers.InstanceController.getSuggestedCollections(url)
#GET     /api/qa/dashboard/collections/:url   controllers.QAController.getCollections(url)

POST    /api/targets                        controllers.APIController.bulkImport()
GET     /api/targets                        controllers.TargetController.allTargetsAsJson(p:Int ?= 0, l:Int ?= 1000, runChecks:Boolean ?= false)
GET     /api/targets/ids                    controllers.TargetController.allTargetsIDsAsJson()
GET     /api/targets/ids/:frequency         controllers.TargetController.idsForFrequencyJson(frequency)
GET     /api/targets/bycollection/:id       controllers.TargetController.collectionTargetsAsJson(id:Long)
GET     /api/targets/:id                    controllers.APIController.viewAsJson(id:Long)
PUT     /api/targets/:id                    controllers.APIController.targetUpdate(id:Long)
GET     /api/targets/:id/instances          controllers.InstanceController.byTargetAsJson(id:Long)
GET     /api/targets/:id/categories         controllers.TargetController.getTargetCategories(id:Long)
GET     /api/crawl/ids/ld/:frequency        controllers.TargetController.idsToCrawlLdFrequencyJson(frequency)
GET     /api/crawl/ids/by/:frequency        controllers.TargetController.idsToCrawlByFrequencyJson(frequency)
GET     /api/crawl/feed/ld/:frequency       controllers.TargetController.crawlFeedLdFrequencyJson(frequency, generatePaywallFeed: Boolean = false)
GET     /api/crawl/feed/pw/:frequency       controllers.TargetController.crawlFeedLdFrequencyJson(frequency, generatePaywallFeed: Boolean = true)
GET     /api/crawl/feed/by/:frequency       controllers.TargetController.crawlFeedByFrequencyJson(frequency)
GET     /api/crawl/feed/oa/:frequency       controllers.TargetController.crawlFeedOAFrequencyJson(frequency)


GET     /api/collections                    controllers.CollectionController.getByJson()
POST    /api/collections                    controllers.CollectionController.collectionCreate()
GET     /api/collections/:id                controllers.CollectionController.viewAsJson(id:Long)
PUT     /api/collections/:id                controllers.CollectionController.collectionUpdate(id:Long)
GET     /api/collections/:id/targets        controllers.CollectionController.getCollectionTargets(id:Long)

# Authentication and authorisation check requests for e.g. NGINX http_auth_request
GET     /api/auth                           controllers.APISecurityCheckController.isUser()
GET     /api/auth/ldl                       controllers.APISecurityCheckController.isLDLMember()

# Password management
GET     /passwords                          controllers.PasswordController.edit()
POST    /passwords                          controllers.PasswordController.save()

# WhoIs check
GET     /whois                              controllers.WhoIsController.index()
GET     /whois/check                        controllers.WhoIsController.check(total:Int ?= 0)

# Sample forms with validation
GET     /targets/blank                      controllers.TargetController.blank()
POST    /targets/save                       controllers.TargetController.saveBlank()

GET     /resetpassword                      controllers.ResetController.showEmailForm()
POST    /resetpassword                      controllers.ResetController.confirmEmail()

# Resets the password using the password.
GET     /reset/:token                       controllers.ResetController.resetPassword(token:String)
POST    /reset/:token                       controllers.ResetController.confirmPassword(token:String)

# Authenticate and proxy requests to the QA Wayback:
GET     /wayback/                           controllers.WaybackController.waybackRoot()
GET     /wayback/*url                       controllers.WaybackController.wayback(url)

# Authenticate and proxy requests to Monitrix:
GET     /monitrix/target/:id                controllers.MonitrixController.forTarget(id:Long)
GET     /monitrix/all                       controllers.MonitrixController.all()

# Authenticated access to internal services:
GET     /site                               controllers.WSProxy.passthrough(url)


